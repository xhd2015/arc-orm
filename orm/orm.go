// Package orm provides the Object-Relational Mapping functionality
package orm

import (
	"errors"
	"fmt"

	"github.com/xhd2015/arc-orm/engine"
	"github.com/xhd2015/arc-orm/table"
)

// ORM provides database operations for any model
// This is typically generated by the ormx code generator
// T represents the model type
// P represents the optional fields type for partial updates
type ORM[T any, P any] struct {
	table  table.Table
	engine engine.Factory
}

// Common errors
var (
	ErrNothingToUpdate   = errors.New("nothing to update")
	ErrMissingIDField    = errors.New("table is missing 'id' field")
	ErrMissingCountField = errors.New("model type must have a Count field of type int64")
)

// Bind creates a new ORM instance and panics if validation fails
func Bind[T any, P any](engine engine.Factory, table table.Table) *ORM[T, P] {
	orm, err := bind[T, P](engine, table)
	if err != nil {
		panic(err)
	}
	return orm
}

// bind creates a new ORM instance and validates the model and optional fields types
func bind[T any, P any](engine engine.Factory, table table.Table) (*ORM[T, P], error) {
	orm := &ORM[T, P]{
		table:  table,
		engine: engine,
	}

	// Validate the model and optional fields types
	if err := orm.Validate(); err != nil {
		return nil, fmt.Errorf("ORM validation failed: %w", err)
	}

	return orm, nil
}
